package bst;

import common.Utilities;
import org.junit.Test;
import gov.nasa.jpf.util.test.TestJPF;

public class BinarySearchTree_remove1 extends TestJPF {

	@Test
	public void test_remove1() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode left_100 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode right_101 = null;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 2;
		int element_81 = 2;
		int maxE_5 = 4;
		int element_93 = 3;
		int element_77 = 3;
		int element_80 = 1;
		int element_99 = 1;
		int element_96 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove2() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode left_178 = new BinaryNode();
		BinaryNode right_179 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode left_166 = null;
		BinaryNode left_181 = null;
		BinaryNode right_182 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_83 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int element_180 = 3;
		int element_81 = 1;
		int element_177 = 4;
		int element_1 = -1;
		int element_165 = 2;
		int element_82 = 2;
		int element_85 = 3;
		int maxE_5 = 5;
		int element_93 = 0;
		int element_84 = 3;
		int element_77 = -1;
		int element_80 = 1;
		int element_86 = 4;
		int x = 4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		right_167.element = element_177;
		right_167.left = left_178;
		right_167.right = right_179;
		left_178.element = element_180;
		left_178.left = left_181;
		left_178.right = right_182;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove3() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		int minE_4 = -3;
		int element_77 = 0;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int x = -1;
		int element_9 = -2;
		int element_6 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove4() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_121 = new BinaryNode();
		BinaryNode right_125 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode right_122 = null;
		BinaryNode left_124 = null;
		int element_79 = -2;
		int element_123 = -1;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -3;
		int element_82 = -2;
		int element_83 = -1;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_81 = 2;
		int element_120 = 1;
		int element_77 = 2;
		int element_80 = 1;
		int element_96 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		left_121.element = element_123;
		left_121.left = left_124;
		left_121.right = right_125;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove5() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_31 = new BinaryNode();
		BinaryNode right_32 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode left_34 = null;
		BinaryNode right_35 = null;
		int element_33 = -2;
		int element_79 = 0;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 2;
		int element_82 = -3;
		int element_30 = -1;
		int element_12 = -3;
		int element_81 = -3;
		int element_6 = 1;
		int element_83 = -2;
		int element_84 = -2;
		int minE_4 = -4;
		int element_77 = 1;
		int element_80 = 1;
		int element_85 = -1;
		int x = -1;
		int element_9 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_30;
		right_14.left = left_31;
		right_14.right = right_32;
		left_31.element = element_33;
		left_31.left = left_34;
		left_31.right = right_35;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove6() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		int minE_4 = -2;
		int element_77 = 0;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int x = -1;
		int element_9 = -1;
		int element_6 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove7() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode left_121 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode left_133 = null;
		BinaryNode right_134 = null;
		int element_79 = -1;
		int element_1 = -2;
		int element_132 = 1;
		int element_76 = -2;
		int element_78 = -2;
		int element_82 = 1;
		int element_83 = 2;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_81 = 1;
		int element_120 = 0;
		int element_77 = 2;
		int element_80 = 0;
		int element_96 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		right_122.element = element_132;
		right_122.left = left_133;
		right_122.right = right_134;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove8() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode right_65 = null;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_81 = 2;
		int element_6 = -1;
		int minE_4 = -2;
		int element_63 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int element_60 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove9() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_146 = new BinaryNode();
		BinaryNode right_158 = new BinaryNode();
		BinaryNode left_157 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode left_145 = null;
		BinaryNode left_163 = null;
		BinaryNode right_164 = null;
		int element_141 = 2;
		int element_162 = 1;
		int element_79 = 2;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -2;
		int element_82 = 0;
		int element_83 = 1;
		int element_85 = 2;
		int element_144 = -1;
		int element_93 = -2;
		int maxE_5 = 3;
		int element_81 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int element_84 = 1;
		int element_156 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		right_146.element = element_156;
		right_146.left = left_157;
		right_146.right = right_158;
		right_158.element = element_162;
		right_158.left = left_163;
		right_158.right = right_164;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove10() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_41 = new BinaryNode();
		BinaryNode right_53 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_40 = null;
		BinaryNode left_52 = null;
		int element_51 = -2;
		int element_79 = -4;
		int element_1 = 1;
		int element_39 = -3;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -3;
		int element_83 = -2;
		int element_81 = -3;
		int element_6 = 0;
		int minE_4 = -5;
		int element_77 = 0;
		int element_80 = -4;
		int x = -1;
		int element_9 = -4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		right_41.element = element_51;
		right_41.left = left_52;
		right_41.right = right_53;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove11() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode left_166 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode left_178 = null;
		BinaryNode right_179 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_1 = -1;
		int element_165 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 3;
		int element_83 = 3;
		int maxE_5 = 4;
		int element_93 = 0;
		int element_81 = 2;
		int element_77 = -1;
		int element_80 = 1;
		int element_177 = 3;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		right_167.element = element_177;
		right_167.left = left_178;
		right_167.right = right_179;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove12() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_3 = null;
		int minE_4 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int x = 0;
		int element_6 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove13() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_146 = new BinaryNode();
		BinaryNode left_145 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode left_157 = null;
		BinaryNode right_158 = null;
		int element_141 = 3;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_83 = 3;
		int element_144 = 1;
		int element_93 = 0;
		int maxE_5 = 4;
		int element_81 = 2;
		int element_77 = -1;
		int element_80 = 1;
		int element_156 = 2;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		right_146.element = element_156;
		right_146.left = left_157;
		right_146.right = right_158;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove14() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_40 = null;
		BinaryNode right_41 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		int element_79 = -2;
		int element_1 = 1;
		int element_39 = -1;
		int element_76 = 1;
		int element_78 = 1;
		int element_6 = 0;
		int minE_4 = -3;
		int element_77 = 0;
		int x = -1;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove15() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode left_133 = null;
		BinaryNode right_134 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode left_121 = null;
		int element_79 = -2;
		int element_1 = -3;
		int element_132 = 0;
		int element_76 = -3;
		int element_78 = -3;
		int maxE_5 = 2;
		int element_93 = 1;
		int element_81 = -1;
		int element_120 = -1;
		int element_77 = 1;
		int element_80 = -2;
		int element_96 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		right_122.element = element_132;
		right_122.left = left_133;
		right_122.right = right_134;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove16() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_41 = new BinaryNode();
		BinaryNode right_53 = new BinaryNode();
		BinaryNode left_52 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_40 = null;
		BinaryNode left_58 = null;
		BinaryNode right_59 = null;
		int element_51 = -2;
		int element_79 = -4;
		int element_1 = 1;
		int element_39 = -3;
		int element_78 = 1;
		int element_57 = -1;
		int element_76 = 1;
		int element_81 = -3;
		int element_6 = 0;
		int element_82 = -2;
		int element_83 = -1;
		int minE_4 = -5;
		int element_77 = 0;
		int element_80 = -4;
		int element_84 = -1;
		int element_85 = 0;
		int x = -2;
		int element_9 = -4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		right_41.element = element_51;
		right_41.left = left_52;
		right_41.right = right_53;
		right_53.element = element_57;
		right_53.left = left_58;
		right_53.right = right_59;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove17() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode left_100 = null;
		BinaryNode right_101 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		int element_79 = 2;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 1;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_77 = 2;
		int element_99 = 0;
		int element_96 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove18() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_62 = new BinaryNode();
		BinaryNode right_86 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_61 = null;
		BinaryNode left_85 = null;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -3;
		int element_81 = -1;
		int element_6 = -3;
		int element_84 = -1;
		int minE_4 = -4;
		int element_77 = -3;
		int element_80 = -2;
		int element_60 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		right_62.element = element_84;
		right_62.left = left_85;
		right_62.right = right_86;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove19() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode left_166 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_145 = null;
		BinaryNode right_146 = null;
		BinaryNode left_178 = null;
		BinaryNode right_179 = null;
		int element_141 = 2;
		int element_79 = 0;
		int element_1 = -1;
		int element_165 = 3;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_83 = 3;
		int element_144 = 1;
		int element_93 = 0;
		int maxE_5 = 5;
		int element_81 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int element_84 = 4;
		int element_85 = 4;
		int element_177 = 4;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		right_167.element = element_177;
		right_167.left = left_178;
		right_167.right = right_179;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove20() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = new BinaryNode();
		BinaryNode right_68 = new BinaryNode();
		BinaryNode left_67 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode right_65 = null;
		BinaryNode left_73 = null;
		BinaryNode right_74 = null;
		int element_79 = 4;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 3;
		int element_82 = 0;
		int element_83 = 1;
		int element_85 = 2;
		int element_81 = 3;
		int element_6 = -1;
		int element_72 = 1;
		int minE_4 = -2;
		int element_63 = 2;
		int element_77 = -1;
		int element_80 = 2;
		int element_84 = 1;
		int element_60 = 3;
		int element_66 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		left_64.element = element_66;
		left_64.left = left_67;
		left_64.right = right_68;
		right_68.element = element_72;
		right_68.left = left_73;
		right_68.right = right_74;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove21() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode left_145 = new BinaryNode();
		BinaryNode right_149 = new BinaryNode();
		BinaryNode left_148 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode right_146 = null;
		BinaryNode left_154 = null;
		BinaryNode right_155 = null;
		int element_141 = 4;
		int element_79 = 4;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 1;
		int element_83 = 2;
		int element_85 = 3;
		int element_144 = 3;
		int element_93 = 0;
		int maxE_5 = 5;
		int element_77 = -1;
		int element_80 = 3;
		int element_81 = 4;
		int element_153 = 2;
		int element_84 = 2;
		int element_147 = 1;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		left_145.element = element_147;
		left_145.left = left_148;
		left_145.right = right_149;
		right_149.element = element_153;
		right_149.left = left_154;
		right_149.right = right_155;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove22() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_62 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_64 = null;
		BinaryNode right_65 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -2;
		int element_81 = 0;
		int element_6 = -2;
		int minE_4 = -3;
		int element_63 = -1;
		int element_77 = -2;
		int element_80 = -1;
		int element_60 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove23() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_95 = null;
		int element_77 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int x = -1;
		int maxE_5 = 1;
		int element_93 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove24() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode right_134 = new BinaryNode();
		BinaryNode left_133 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode left_121 = null;
		BinaryNode left_139 = null;
		BinaryNode right_140 = null;
		int element_79 = -2;
		int element_1 = -3;
		int element_132 = 0;
		int element_76 = -3;
		int element_78 = -3;
		int element_82 = 0;
		int element_83 = 1;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_81 = -1;
		int element_120 = -1;
		int element_77 = 2;
		int element_80 = -2;
		int element_84 = 1;
		int element_96 = -2;
		int element_138 = 1;
		int element_85 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		right_122.element = element_132;
		right_122.left = left_133;
		right_122.right = right_134;
		right_134.element = element_138;
		right_134.left = left_139;
		right_134.right = right_140;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove25() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_166 = null;
		BinaryNode right_167 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_145 = null;
		BinaryNode right_146 = null;
		int element_141 = 2;
		int element_79 = 0;
		int element_1 = -1;
		int element_165 = 3;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_144 = 1;
		int element_93 = 0;
		int maxE_5 = 4;
		int element_77 = -1;
		int element_80 = 1;
		int element_81 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove26() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = null;
		BinaryNode right_95 = null;
		BinaryNode left_2 = null;
		int element_1 = -1;
		int element_76 = -1;
		int x = 0;
		int maxE_5 = 1;
		int element_93 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove27() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_62 = new BinaryNode();
		BinaryNode left_85 = null;
		BinaryNode right_86 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_61 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -2;
		int element_6 = -2;
		int element_84 = 0;
		int minE_4 = -3;
		int element_77 = -2;
		int element_60 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		right_62.element = element_84;
		right_62.left = left_85;
		right_62.right = right_86;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove28() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_98 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_100 = null;
		BinaryNode right_101 = null;
		int element_79 = 1;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = 0;
		int element_81 = 2;
		int maxE_5 = 4;
		int element_93 = 3;
		int element_77 = 3;
		int element_80 = 1;
		int element_99 = 1;
		int element_96 = 2;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove29() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = null;
		BinaryNode right_143 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		int element_141 = 1;
		int element_77 = -1;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int x = 1;
		int maxE_5 = 2;
		int element_93 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove30() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_97 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_121 = null;
		BinaryNode right_122 = null;
		int element_79 = 1;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 2;
		int element_93 = 2;
		int maxE_5 = 3;
		int element_120 = 1;
		int element_77 = 2;
		int element_80 = 1;
		int element_96 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove31() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_41 = new BinaryNode();
		BinaryNode left_52 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_40 = null;
		BinaryNode right_53 = null;
		int element_51 = -1;
		int element_79 = -4;
		int element_1 = 1;
		int element_39 = -3;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -1;
		int element_81 = -3;
		int element_6 = 0;
		int element_83 = 0;
		int minE_4 = -5;
		int element_77 = 0;
		int element_80 = -4;
		int x = -2;
		int element_9 = -4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		right_41.element = element_51;
		right_41.left = left_52;
		right_41.right = right_53;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove32() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_65 = new BinaryNode();
		BinaryNode left_76 = null;
		BinaryNode right_77 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode left_64 = null;
		int element_79 = 2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 1;
		int element_81 = -1;
		int element_6 = -2;
		int minE_4 = -3;
		int element_63 = -1;
		int element_77 = -2;
		int element_80 = -2;
		int element_60 = 1;
		int element_75 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		right_65.element = element_75;
		right_65.left = left_76;
		right_65.right = right_77;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove33() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode left_100 = new BinaryNode();
		BinaryNode left_103 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode right_101 = null;
		BinaryNode right_104 = null;
		int element_79 = 4;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 3;
		int element_82 = 1;
		int element_83 = 2;
		int maxE_5 = 5;
		int element_93 = 4;
		int element_81 = 3;
		int element_77 = 4;
		int element_80 = 2;
		int element_99 = 2;
		int element_96 = 3;
		int element_102 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		left_100.element = element_102;
		left_100.left = left_103;
		left_100.right = right_104;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove34() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode left_145 = new BinaryNode();
		BinaryNode left_148 = null;
		BinaryNode right_149 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode right_146 = null;
		int element_141 = 3;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_144 = 2;
		int element_93 = 0;
		int maxE_5 = 4;
		int element_77 = -1;
		int element_80 = 2;
		int element_81 = 3;
		int element_147 = 1;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		left_145.element = element_147;
		left_145.left = left_148;
		left_145.right = right_149;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove35() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_166 = new BinaryNode();
		BinaryNode left_169 = null;
		BinaryNode right_170 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode right_167 = null;
		int element_141 = -1;
		int element_79 = -2;
		int element_168 = 0;
		int element_1 = -3;
		int element_165 = 1;
		int element_76 = -3;
		int element_78 = -2;
		int maxE_5 = 2;
		int element_93 = -2;
		int element_81 = 1;
		int element_77 = -3;
		int element_80 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		left_166.element = element_168;
		left_166.left = left_169;
		left_166.right = right_170;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove36() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = null;
		BinaryNode right_62 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		int minE_4 = -2;
		int element_77 = -1;
		int element_1 = 1;
		int element_60 = 0;
		int element_76 = 1;
		int x = 0;
		int element_6 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove37() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_62 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_61 = null;
		int minE_4 = -3;
		int element_77 = -2;
		int element_79 = -1;
		int element_1 = 1;
		int element_60 = -1;
		int element_76 = 1;
		int element_78 = -2;
		int x = 0;
		int element_6 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove38() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode right_179 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode left_166 = null;
		BinaryNode left_178 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_1 = -1;
		int element_165 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int maxE_5 = 4;
		int element_93 = 0;
		int element_81 = 1;
		int element_83 = 2;
		int element_77 = -1;
		int element_80 = 1;
		int element_84 = 3;
		int element_177 = 3;
		int x = 4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		right_167.element = element_177;
		right_167.left = left_178;
		right_167.right = right_179;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove39() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_40 = new BinaryNode();
		BinaryNode right_41 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_43 = null;
		BinaryNode right_44 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_39 = -1;
		int element_76 = 1;
		int element_42 = -2;
		int element_78 = 1;
		int element_82 = -2;
		int element_81 = -2;
		int element_6 = 0;
		int element_83 = -1;
		int minE_4 = -4;
		int element_77 = 0;
		int element_80 = -3;
		int x = -1;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		left_40.element = element_42;
		left_40.left = left_43;
		left_40.right = right_44;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove40() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode left_16 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode right_17 = null;
		int element_79 = 3;
		int element_15 = 1;
		int element_1 = 5;
		int element_76 = 5;
		int element_78 = 5;
		int element_82 = 3;
		int element_83 = 1;
		int element_12 = 2;
		int element_81 = 2;
		int element_6 = 4;
		int element_84 = 2;
		int minE_4 = 0;
		int element_77 = 4;
		int element_80 = 4;
		int x = 0;
		int element_9 = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove41() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_121 = new BinaryNode();
		BinaryNode right_125 = new BinaryNode();
		BinaryNode left_124 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode right_122 = null;
		BinaryNode left_130 = null;
		BinaryNode right_131 = null;
		int element_79 = -1;
		int element_123 = 0;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -2;
		int element_82 = 0;
		int element_83 = 1;
		int element_85 = 2;
		int maxE_5 = 4;
		int element_93 = 3;
		int element_81 = 3;
		int element_120 = 2;
		int element_77 = 3;
		int element_80 = 2;
		int element_84 = 1;
		int element_96 = -1;
		int element_129 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		left_121.element = element_123;
		left_121.left = left_124;
		left_121.right = right_125;
		right_125.element = element_129;
		right_125.left = left_130;
		right_125.right = right_131;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove42() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = null;
		BinaryNode right_65 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		int element_79 = 2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 1;
		int element_6 = -1;
		int minE_4 = -2;
		int element_63 = 0;
		int element_77 = -1;
		int element_60 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove43() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_31 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode right_32 = null;
		int element_79 = 2;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 4;
		int element_82 = 1;
		int element_30 = 1;
		int element_12 = -1;
		int element_81 = -1;
		int element_6 = 3;
		int element_83 = 2;
		int minE_4 = -2;
		int element_77 = 3;
		int element_80 = 3;
		int x = 0;
		int element_9 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_30;
		right_14.left = left_31;
		right_14.right = right_32;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove44() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_101 = new BinaryNode();
		BinaryNode left_112 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode left_100 = null;
		BinaryNode right_113 = null;
		int element_79 = 3;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = 2;
		int element_82 = 1;
		int element_83 = 2;
		int maxE_5 = 4;
		int element_93 = 3;
		int element_81 = -1;
		int element_77 = 3;
		int element_111 = 1;
		int element_99 = -1;
		int element_96 = 2;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		right_101.element = element_111;
		right_101.left = left_112;
		right_101.right = right_113;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove45() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		int element_77 = 1;
		int element_1 = -1;
		int element_76 = -1;
		int x = 0;
		int maxE_5 = 2;
		int element_93 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove46() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode left_100 = new BinaryNode();
		BinaryNode left_103 = new BinaryNode();
		BinaryNode right_104 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode right_101 = null;
		BinaryNode left_106 = null;
		BinaryNode right_107 = null;
		int element_79 = 5;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = 4;
		int element_82 = 0;
		int element_83 = 1;
		int maxE_5 = 6;
		int element_93 = 5;
		int element_81 = 4;
		int element_84 = 1;
		int element_77 = 5;
		int element_80 = 3;
		int element_99 = 3;
		int element_96 = 4;
		int element_85 = 2;
		int element_105 = 1;
		int element_102 = 2;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		left_100.element = element_102;
		left_100.left = left_103;
		left_100.right = right_104;
		left_103.element = element_105;
		left_103.left = left_106;
		left_103.right = right_107;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove47() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = null;
		BinaryNode right_143 = null;
		BinaryNode left_2 = null;
		BinaryNode left_97 = null;
		BinaryNode right_98 = null;
		int element_141 = 1;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int maxE_5 = 2;
		int element_93 = 0;
		int element_77 = -2;
		int element_80 = 0;
		int element_96 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove48() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = null;
		BinaryNode right_98 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_95 = null;
		int element_79 = 2;
		int element_1 = 0;
		int element_76 = -1;
		int element_78 = 0;
		int maxE_5 = 3;
		int element_6 = -1;
		int element_93 = 2;
		int minE_4 = -2;
		int element_77 = -1;
		int element_96 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove49() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_62 = new BinaryNode();
		BinaryNode right_86 = new BinaryNode();
		BinaryNode left_85 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_61 = null;
		BinaryNode left_91 = null;
		BinaryNode right_92 = null;
		int element_79 = -3;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = -4;
		int element_82 = -1;
		int element_90 = -1;
		int element_81 = -1;
		int element_6 = -4;
		int element_83 = 0;
		int element_84 = -2;
		int minE_4 = -5;
		int element_77 = -4;
		int element_80 = -2;
		int element_60 = -3;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		right_62.element = element_84;
		right_62.left = left_85;
		right_62.right = right_86;
		right_86.element = element_90;
		right_86.left = left_91;
		right_86.right = right_92;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove50() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode left_145 = new BinaryNode();
		BinaryNode right_146 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode left_148 = null;
		BinaryNode right_149 = null;
		int element_141 = 3;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 1;
		int element_83 = 2;
		int element_144 = 2;
		int element_93 = 0;
		int maxE_5 = 4;
		int element_81 = 1;
		int element_77 = -1;
		int element_80 = 0;
		int element_147 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		left_145.element = element_147;
		left_145.left = left_148;
		left_145.right = right_149;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove51() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		int element_77 = 1;
		int element_79 = -1;
		int element_96 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -2;
		int x = 0;
		int maxE_5 = 2;
		int element_93 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove52() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = null;
		BinaryNode right_14 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_12 = -2;
		int element_6 = 0;
		int minE_4 = -3;
		int element_77 = 0;
		int element_80 = 0;
		int x = -2;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove53() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode left_16 = new BinaryNode();
		BinaryNode right_17 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode left_19 = null;
		BinaryNode right_20 = null;
		int element_18 = 1;
		int element_79 = 4;
		int element_15 = 2;
		int element_1 = 6;
		int element_76 = 6;
		int element_78 = 6;
		int element_82 = 4;
		int element_83 = 1;
		int element_12 = 3;
		int element_81 = 3;
		int element_6 = 5;
		int element_85 = 2;
		int element_84 = 1;
		int minE_4 = 0;
		int element_77 = 5;
		int element_80 = 5;
		int x = 2;
		int element_9 = 4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		left_16.element = element_18;
		left_16.left = left_19;
		left_16.right = right_20;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove54() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		int element_93 = 2;
		int element_77 = 2;
		int element_79 = 2;
		int element_96 = 1;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 1;
		int x = 0;
		int maxE_5 = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove55() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -1;
		int element_12 = -2;
		int element_81 = -2;
		int element_6 = 0;
		int minE_4 = -3;
		int element_77 = 0;
		int element_80 = 0;
		int x = -3;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove56() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		int element_141 = 2;
		int element_77 = -1;
		int element_79 = 2;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int x = 1;
		int maxE_5 = 3;
		int element_93 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove57() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode left_16 = null;
		BinaryNode right_17 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		int element_79 = 2;
		int element_15 = 0;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 4;
		int element_82 = 2;
		int element_12 = 1;
		int element_81 = 1;
		int element_6 = 3;
		int minE_4 = -1;
		int element_77 = 3;
		int element_80 = 3;
		int x = 0;
		int element_9 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove58() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode right_167 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode left_166 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_1 = -1;
		int element_165 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_81 = 1;
		int maxE_5 = 3;
		int element_93 = 0;
		int element_77 = -1;
		int element_80 = 1;
		int x = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove59() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = null;
		BinaryNode right_3 = null;
		int element_1 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove60() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode left_178 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode left_166 = null;
		BinaryNode right_179 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_1 = -1;
		int element_165 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_83 = 4;
		int maxE_5 = 5;
		int element_93 = 0;
		int element_81 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int element_177 = 4;
		int x = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		right_167.element = element_177;
		right_167.left = left_178;
		right_167.right = right_179;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove61() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_166 = null;
		BinaryNode right_167 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_1 = -1;
		int element_165 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int maxE_5 = 3;
		int element_93 = 0;
		int element_77 = -1;
		int element_80 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove62() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_142 = null;
		BinaryNode left_2 = null;
		BinaryNode left_97 = null;
		BinaryNode right_98 = null;
		BinaryNode left_166 = null;
		BinaryNode right_167 = null;
		int element_141 = 1;
		int element_79 = -1;
		int element_1 = -2;
		int element_165 = 2;
		int element_76 = -2;
		int element_78 = -1;
		int element_82 = 2;
		int maxE_5 = 3;
		int element_93 = 0;
		int element_81 = 1;
		int element_83 = 2;
		int element_77 = -2;
		int element_80 = 0;
		int element_96 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove63() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode left_145 = new BinaryNode();
		BinaryNode right_149 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode right_146 = null;
		BinaryNode left_148 = null;
		int element_141 = 4;
		int element_79 = 4;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 0;
		int element_83 = 1;
		int element_144 = 3;
		int element_93 = 0;
		int maxE_5 = 5;
		int element_81 = 4;
		int element_77 = -1;
		int element_80 = 3;
		int element_147 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		left_145.element = element_147;
		left_145.left = left_148;
		left_145.right = right_149;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove64() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode left_145 = null;
		BinaryNode right_146 = null;
		BinaryNode left_2 = null;
		BinaryNode left_97 = null;
		BinaryNode right_98 = null;
		BinaryNode right_143 = null;
		int element_141 = 2;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int element_144 = 1;
		int element_93 = 0;
		int maxE_5 = 3;
		int element_81 = 2;
		int element_77 = -2;
		int element_80 = 0;
		int element_96 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove65() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_146 = new BinaryNode();
		BinaryNode left_157 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode left_145 = null;
		BinaryNode right_158 = null;
		int element_141 = 2;
		int element_79 = 2;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -2;
		int element_82 = 1;
		int element_83 = 2;
		int element_144 = -1;
		int element_93 = -2;
		int maxE_5 = 3;
		int element_81 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int element_156 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		right_146.element = element_156;
		right_146.left = left_157;
		right_146.right = right_158;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove66() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_11 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_13 = null;
		BinaryNode right_14 = null;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_12 = -2;
		int element_81 = -1;
		int element_6 = 0;
		int minE_4 = -3;
		int element_77 = 0;
		int element_80 = -2;
		int x = -1;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove67() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_143 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_145 = null;
		BinaryNode right_146 = null;
		int element_141 = 2;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_81 = 1;
		int element_93 = 0;
		int element_144 = 1;
		int maxE_5 = 3;
		int element_77 = -1;
		int element_80 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove68() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = null;
		BinaryNode left_2 = null;
		int element_1 = -1;
		int element_76 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove69() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_121 = new BinaryNode();
		BinaryNode left_124 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode right_122 = null;
		BinaryNode right_125 = null;
		int element_79 = -1;
		int element_123 = 1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -2;
		int element_82 = 1;
		int element_83 = 2;
		int maxE_5 = 4;
		int element_93 = 3;
		int element_81 = 3;
		int element_120 = 2;
		int element_77 = 3;
		int element_80 = 2;
		int element_96 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		left_121.element = element_123;
		left_121.left = left_124;
		left_121.right = right_125;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove70() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_65 = new BinaryNode();
		BinaryNode right_77 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode left_64 = null;
		BinaryNode left_76 = null;
		int element_79 = 2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 1;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = -2;
		int element_6 = -3;
		int minE_4 = -4;
		int element_63 = -2;
		int element_77 = -3;
		int element_80 = -3;
		int element_60 = 1;
		int element_75 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		right_65.element = element_75;
		right_65.left = left_76;
		right_65.right = right_77;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove71() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		int minE_4 = 0;
		int element_77 = 1;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 2;
		int x = 0;
		int element_6 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove72() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_121 = new BinaryNode();
		BinaryNode right_122 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode left_124 = null;
		BinaryNode right_125 = null;
		int element_79 = -2;
		int element_123 = -1;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -3;
		int element_82 = -1;
		int element_83 = 0;
		int maxE_5 = 2;
		int element_93 = 1;
		int element_81 = -1;
		int element_120 = 0;
		int element_77 = 1;
		int element_80 = -2;
		int element_96 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		left_121.element = element_123;
		left_121.left = left_124;
		left_121.right = right_125;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove73() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode left_145 = new BinaryNode();
		BinaryNode left_148 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode right_146 = null;
		BinaryNode right_149 = null;
		int element_141 = 4;
		int element_79 = 4;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_83 = 3;
		int element_144 = 3;
		int element_93 = 0;
		int maxE_5 = 5;
		int element_77 = -1;
		int element_80 = 3;
		int element_81 = 4;
		int element_147 = 2;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		left_145.element = element_147;
		left_145.left = left_148;
		left_145.right = right_149;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove74() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode left_100 = new BinaryNode();
		BinaryNode right_101 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode left_103 = null;
		BinaryNode right_104 = null;
		int element_79 = 4;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = 3;
		int element_82 = 1;
		int element_83 = 2;
		int maxE_5 = 5;
		int element_93 = 4;
		int element_81 = 1;
		int element_77 = 4;
		int element_80 = 0;
		int element_99 = 2;
		int element_96 = 3;
		int element_102 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		left_100.element = element_102;
		left_100.left = left_103;
		left_100.right = right_104;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove75() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = null;
		BinaryNode right_62 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		int element_79 = 0;
		int element_1 = 2;
		int element_78 = -1;
		int element_76 = 2;
		int element_6 = 0;
		int minE_4 = -2;
		int element_77 = -1;
		int element_60 = 1;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove76() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode left_121 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_100 = null;
		BinaryNode right_101 = null;
		BinaryNode left_133 = null;
		BinaryNode right_134 = null;
		int element_79 = -4;
		int element_1 = -5;
		int element_132 = -1;
		int element_76 = -5;
		int element_78 = -5;
		int element_82 = -2;
		int element_83 = -1;
		int maxE_5 = 1;
		int element_93 = 0;
		int element_81 = -3;
		int element_120 = -2;
		int element_77 = 0;
		int element_80 = -4;
		int element_99 = -4;
		int element_96 = -3;
		int element_84 = -1;
		int element_85 = 0;
		int x = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		right_122.element = element_132;
		right_122.left = left_133;
		right_122.right = right_134;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove77() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		int element_77 = -2;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int x = 0;
		int maxE_5 = 0;
		int element_93 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove78() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_40 = null;
		BinaryNode right_41 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_13 = null;
		BinaryNode right_14 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_39 = -1;
		int element_76 = 1;
		int element_78 = 1;
		int element_12 = -3;
		int element_81 = -2;
		int element_6 = 0;
		int minE_4 = -4;
		int element_77 = 0;
		int element_80 = -3;
		int x = -2;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove79() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_12 = -3;
		int element_81 = -3;
		int element_6 = 0;
		int minE_4 = -4;
		int element_77 = 0;
		int element_80 = 0;
		int x = -2;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove80() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_10 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_40 = null;
		BinaryNode right_41 = null;
		int element_79 = -2;
		int element_1 = 1;
		int element_39 = -1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = 0;
		int element_81 = -1;
		int element_6 = 0;
		int minE_4 = -3;
		int element_77 = 0;
		int element_80 = -1;
		int x = -2;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove81() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_101 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode left_100 = null;
		int element_79 = 2;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = 1;
		int element_81 = -1;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_77 = 2;
		int element_80 = -2;
		int element_99 = -1;
		int element_96 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove82() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_62 = new BinaryNode();
		BinaryNode left_85 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_61 = null;
		BinaryNode right_86 = null;
		int element_79 = -1;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = -2;
		int element_81 = 2;
		int element_6 = -2;
		int element_84 = 1;
		int minE_4 = -3;
		int element_77 = -2;
		int element_80 = 1;
		int element_60 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		right_62.element = element_84;
		right_62.left = left_85;
		right_62.right = right_86;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove83() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_95 = null;
		BinaryNode left_2 = null;
		BinaryNode left_97 = null;
		BinaryNode right_98 = null;
		int element_79 = 1;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = 1;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_77 = 0;
		int element_80 = 2;
		int element_96 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove84() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode right_14 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_16 = null;
		BinaryNode right_17 = null;
		int element_79 = -1;
		int element_15 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -3;
		int element_83 = -2;
		int element_12 = -2;
		int element_81 = -3;
		int element_6 = 0;
		int minE_4 = -4;
		int element_77 = 0;
		int element_80 = 0;
		int x = -2;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove85() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_101 = new BinaryNode();
		BinaryNode left_100 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode left_112 = null;
		BinaryNode right_113 = null;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 2;
		int element_82 = 1;
		int element_83 = 2;
		int maxE_5 = 4;
		int element_93 = 3;
		int element_81 = 1;
		int element_77 = 3;
		int element_111 = 1;
		int element_99 = 0;
		int element_96 = 2;
		int element_80 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		right_101.element = element_111;
		right_101.left = left_112;
		right_101.right = right_113;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove86() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode right_134 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode left_121 = null;
		BinaryNode left_133 = null;
		int element_79 = -3;
		int element_1 = -4;
		int element_132 = -1;
		int element_76 = -4;
		int element_78 = -4;
		int element_82 = -2;
		int element_83 = -1;
		int maxE_5 = 2;
		int element_93 = 1;
		int element_81 = -2;
		int element_120 = -2;
		int element_77 = 1;
		int element_80 = -3;
		int element_96 = -3;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		right_122.element = element_132;
		right_122.left = left_133;
		right_122.right = right_134;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove87() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_94 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode left_142 = null;
		BinaryNode right_143 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -2;
		int element_78 = -1;
		int maxE_5 = 2;
		int element_6 = -2;
		int element_93 = 0;
		int element_81 = 1;
		int minE_4 = -3;
		int element_77 = -2;
		int element_80 = 1;
		int x = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove88() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_41 = new BinaryNode();
		BinaryNode left_40 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_13 = null;
		BinaryNode right_14 = null;
		BinaryNode left_52 = null;
		BinaryNode right_53 = null;
		int element_51 = -1;
		int element_79 = -4;
		int element_1 = 1;
		int element_39 = -2;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -2;
		int element_12 = -4;
		int element_81 = -3;
		int element_6 = 0;
		int element_83 = -1;
		int element_84 = -1;
		int minE_4 = -5;
		int element_77 = 0;
		int element_80 = -4;
		int element_85 = 0;
		int x = -3;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		right_41.element = element_51;
		right_41.left = left_52;
		right_41.right = right_53;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove89() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_146 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode left_145 = null;
		int element_141 = 3;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 1;
		int element_93 = 0;
		int element_144 = 1;
		int maxE_5 = 4;
		int element_77 = -1;
		int element_80 = 0;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove90() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_41 = new BinaryNode();
		BinaryNode left_52 = null;
		BinaryNode right_53 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_40 = null;
		int element_51 = -1;
		int element_79 = -3;
		int element_1 = 1;
		int element_39 = -2;
		int element_76 = 1;
		int element_78 = 1;
		int element_81 = -2;
		int element_6 = 0;
		int minE_4 = -4;
		int element_77 = 0;
		int element_80 = -3;
		int x = -1;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		right_41.element = element_51;
		right_41.left = left_52;
		right_41.right = right_53;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove91() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_7 = null;
		BinaryNode right_3 = null;
		BinaryNode left_61 = null;
		BinaryNode right_62 = null;
		int element_79 = -1;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = -1;
		int element_6 = -2;
		int minE_4 = -3;
		int element_77 = -2;
		int element_80 = 0;
		int element_60 = -1;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove92() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode left_133 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode left_121 = null;
		BinaryNode right_134 = null;
		int element_79 = -2;
		int element_1 = -3;
		int element_132 = 1;
		int element_76 = -3;
		int element_78 = -3;
		int element_82 = 1;
		int element_83 = 2;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_81 = -1;
		int element_120 = -1;
		int element_77 = 2;
		int element_80 = -2;
		int element_96 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		right_122.element = element_132;
		right_122.left = left_133;
		right_122.right = right_134;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove93() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode left_145 = null;
		BinaryNode right_146 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		int element_141 = 2;
		int element_79 = 2;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_144 = 1;
		int element_93 = 0;
		int maxE_5 = 3;
		int element_77 = -1;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove94() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_146 = new BinaryNode();
		BinaryNode right_158 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode left_145 = null;
		BinaryNode left_157 = null;
		int element_141 = 1;
		int element_79 = 1;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -2;
		int element_83 = -1;
		int element_144 = -2;
		int element_93 = -3;
		int maxE_5 = 2;
		int element_81 = -2;
		int element_77 = -4;
		int element_80 = -3;
		int element_156 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		right_146.element = element_156;
		right_146.left = left_157;
		right_146.right = right_158;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove95() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = new BinaryNode();
		BinaryNode left_67 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode right_65 = null;
		BinaryNode right_68 = null;
		int element_79 = 4;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 3;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 3;
		int element_6 = -1;
		int minE_4 = -2;
		int element_63 = 2;
		int element_77 = -1;
		int element_80 = 2;
		int element_60 = 3;
		int element_66 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		left_64.element = element_66;
		left_64.left = left_67;
		left_64.right = right_68;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove96() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = null;
		BinaryNode right_98 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		int element_93 = 1;
		int element_77 = 1;
		int element_96 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int x = 0;
		int maxE_5 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove97() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode right_179 = new BinaryNode();
		BinaryNode left_178 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode left_166 = null;
		BinaryNode left_184 = null;
		BinaryNode right_185 = null;
		int element_141 = -4;
		int element_79 = -5;
		int element_1 = -6;
		int element_165 = -3;
		int element_78 = -5;
		int element_183 = -1;
		int element_76 = -6;
		int element_82 = -3;
		int maxE_5 = 0;
		int element_93 = -5;
		int element_81 = -4;
		int element_83 = -2;
		int element_77 = -6;
		int element_80 = -4;
		int element_84 = -1;
		int element_85 = -1;
		int element_177 = -2;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		right_167.element = element_177;
		right_167.left = left_178;
		right_167.right = right_179;
		right_179.element = element_183;
		right_179.left = left_184;
		right_179.right = right_185;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove98() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_65 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode left_64 = null;
		int element_79 = 2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 1;
		int element_81 = -1;
		int element_6 = -2;
		int minE_4 = -3;
		int element_63 = -1;
		int element_77 = -2;
		int element_80 = -2;
		int element_60 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove99() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode right_32 = new BinaryNode();
		BinaryNode left_31 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode left_37 = null;
		BinaryNode right_38 = null;
		int element_36 = -1;
		int element_79 = 0;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 2;
		int element_82 = -2;
		int element_30 = -2;
		int element_12 = -3;
		int element_81 = -3;
		int element_6 = 1;
		int element_83 = -1;
		int element_84 = -1;
		int minE_4 = -4;
		int element_77 = 1;
		int element_80 = 1;
		int element_85 = 0;
		int x = -2;
		int element_9 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_30;
		right_14.left = left_31;
		right_14.right = right_32;
		right_32.element = element_36;
		right_32.left = left_37;
		right_32.right = right_38;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove100() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_101 = new BinaryNode();
		BinaryNode left_112 = null;
		BinaryNode right_113 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode left_100 = null;
		int element_79 = 2;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = 1;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_81 = -1;
		int element_77 = 2;
		int element_111 = 0;
		int element_99 = -1;
		int element_96 = 1;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		right_101.element = element_111;
		right_101.left = left_112;
		right_101.right = right_113;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove101() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode left_145 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode right_146 = null;
		int element_141 = 3;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 3;
		int element_93 = 0;
		int element_144 = 2;
		int maxE_5 = 4;
		int element_77 = -1;
		int element_80 = 2;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove102() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_97 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_95 = null;
		BinaryNode left_121 = null;
		BinaryNode right_122 = null;
		int element_79 = 0;
		int element_1 = -3;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -1;
		int element_83 = 0;
		int maxE_5 = 1;
		int element_6 = -4;
		int element_93 = 0;
		int element_120 = -1;
		int minE_4 = -5;
		int element_77 = -4;
		int element_80 = -2;
		int element_96 = -2;
		int element_81 = -1;
		int x = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove103() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode right_17 = new BinaryNode();
		BinaryNode left_16 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode left_28 = null;
		BinaryNode right_29 = null;
		int element_79 = 4;
		int element_83 = 1;
		int element_76 = 6;
		int element_78 = 6;
		int element_12 = 3;
		int element_81 = 3;
		int element_6 = 5;
		int minE_4 = 0;
		int element_15 = 1;
		int element_27 = 2;
		int element_1 = 6;
		int element_82 = 4;
		int element_85 = 2;
		int element_84 = 2;
		int element_77 = 5;
		int element_80 = 5;
		int element_86 = 3;
		int x = 1;
		int element_9 = 4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		right_17.element = element_27;
		right_17.left = left_28;
		right_17.right = right_29;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove104() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode right_32 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode left_31 = null;
		int element_79 = 1;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 3;
		int element_82 = -2;
		int element_30 = -1;
		int element_12 = -2;
		int element_81 = -2;
		int element_6 = 2;
		int element_83 = -1;
		int minE_4 = -3;
		int element_77 = 2;
		int element_80 = 2;
		int x = 0;
		int element_9 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_30;
		right_14.left = left_31;
		right_14.right = right_32;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove105() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_101 = new BinaryNode();
		BinaryNode left_100 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode left_112 = null;
		BinaryNode right_113 = null;
		int element_79 = 4;
		int element_83 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 4;
		int element_6 = -1;
		int minE_4 = -2;
		int element_99 = 1;
		int element_96 = 3;
		int element_1 = 0;
		int element_82 = 1;
		int element_85 = 3;
		int maxE_5 = 5;
		int element_93 = 4;
		int element_84 = 2;
		int element_77 = -1;
		int element_111 = 2;
		int element_80 = 3;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		right_101.element = element_111;
		right_101.left = left_112;
		right_101.right = right_113;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove106() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_41 = new BinaryNode();
		BinaryNode left_52 = new BinaryNode();
		BinaryNode right_53 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_40 = null;
		BinaryNode left_55 = null;
		BinaryNode right_56 = null;
		int element_51 = -1;
		int element_79 = -4;
		int element_1 = 1;
		int element_39 = -3;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -3;
		int element_54 = -2;
		int element_81 = -3;
		int element_6 = 0;
		int element_83 = -2;
		int element_84 = -2;
		int minE_4 = -5;
		int element_77 = 0;
		int element_80 = -4;
		int element_85 = -1;
		int x = -1;
		int element_9 = -4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		right_41.element = element_51;
		right_41.left = left_52;
		right_41.right = right_53;
		left_52.element = element_54;
		left_52.left = left_55;
		left_52.right = right_56;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove107() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_41 = new BinaryNode();
		BinaryNode left_40 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_52 = null;
		BinaryNode right_53 = null;
		int element_51 = -1;
		int element_79 = -3;
		int element_1 = 1;
		int element_39 = -2;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -1;
		int element_83 = 0;
		int element_81 = -1;
		int element_6 = 0;
		int minE_4 = -4;
		int element_77 = 0;
		int element_80 = -2;
		int x = -2;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		right_41.element = element_51;
		right_41.left = left_52;
		right_41.right = right_53;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove108() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_65 = new BinaryNode();
		BinaryNode left_76 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode left_64 = null;
		BinaryNode right_77 = null;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = -1;
		int element_6 = -2;
		int minE_4 = -3;
		int element_63 = -1;
		int element_77 = -2;
		int element_80 = -2;
		int element_60 = 2;
		int element_75 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		right_65.element = element_75;
		right_65.left = left_76;
		right_65.right = right_77;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove109() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_121 = null;
		BinaryNode right_122 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_100 = null;
		BinaryNode right_101 = null;
		int element_79 = 1;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = 0;
		int maxE_5 = 5;
		int element_93 = 4;
		int element_81 = 2;
		int element_120 = 3;
		int element_77 = 4;
		int element_99 = 1;
		int element_96 = 2;
		int element_80 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove110() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode left_100 = new BinaryNode();
		BinaryNode right_104 = new BinaryNode();
		BinaryNode left_103 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode right_101 = null;
		BinaryNode left_109 = null;
		BinaryNode right_110 = null;
		int element_79 = 4;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 3;
		int element_82 = 0;
		int element_83 = 1;
		int element_85 = 2;
		int maxE_5 = 5;
		int element_93 = 4;
		int element_81 = 3;
		int element_84 = 1;
		int element_77 = 4;
		int element_80 = 2;
		int element_99 = 2;
		int element_96 = 3;
		int element_108 = 1;
		int element_102 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		left_100.element = element_102;
		left_100.left = left_103;
		left_100.right = right_104;
		right_104.element = element_108;
		right_104.left = left_109;
		right_104.right = right_110;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove111() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_101 = new BinaryNode();
		BinaryNode right_113 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode left_100 = null;
		BinaryNode left_112 = null;
		int element_79 = 2;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = 1;
		int element_82 = -2;
		int element_83 = -1;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_81 = -2;
		int element_77 = 2;
		int element_111 = -1;
		int element_99 = -2;
		int element_96 = 1;
		int element_80 = -3;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		right_101.element = element_111;
		right_101.left = left_112;
		right_101.right = right_113;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove112() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_121 = null;
		BinaryNode right_122 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -2;
		int maxE_5 = 2;
		int element_93 = 1;
		int element_120 = 0;
		int element_77 = 1;
		int element_96 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove113() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_40 = new BinaryNode();
		BinaryNode right_44 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_41 = null;
		BinaryNode left_43 = null;
		int element_79 = -2;
		int element_1 = 3;
		int element_39 = 1;
		int element_76 = 3;
		int element_42 = -1;
		int element_78 = 3;
		int element_82 = -2;
		int element_81 = 2;
		int element_6 = 2;
		int element_83 = -1;
		int minE_4 = -3;
		int element_77 = 2;
		int element_80 = 1;
		int x = 0;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		left_40.element = element_42;
		left_40.left = left_43;
		left_40.right = right_44;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove114() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode right_101 = new BinaryNode();
		BinaryNode right_113 = new BinaryNode();
		BinaryNode left_112 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode left_100 = null;
		BinaryNode left_118 = null;
		BinaryNode right_119 = null;
		int element_117 = 1;
		int element_79 = 3;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = 2;
		int element_82 = 0;
		int element_83 = 1;
		int element_85 = 2;
		int maxE_5 = 4;
		int element_93 = 3;
		int element_81 = -1;
		int element_84 = 1;
		int element_77 = 3;
		int element_111 = 0;
		int element_99 = -1;
		int element_96 = 2;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		right_101.element = element_111;
		right_101.left = left_112;
		right_101.right = right_113;
		right_113.element = element_117;
		right_113.left = left_118;
		right_113.right = right_119;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove115() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode left_133 = new BinaryNode();
		BinaryNode right_134 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode left_121 = null;
		BinaryNode left_136 = null;
		BinaryNode right_137 = null;
		int element_79 = -3;
		int element_1 = -4;
		int element_132 = 0;
		int element_76 = -4;
		int element_78 = -4;
		int element_82 = -2;
		int element_83 = -1;
		int maxE_5 = 2;
		int element_93 = 1;
		int element_135 = -1;
		int element_120 = -2;
		int element_77 = 1;
		int element_80 = -3;
		int element_81 = -2;
		int element_96 = -3;
		int element_84 = -1;
		int element_85 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		right_122.element = element_132;
		right_122.left = left_133;
		right_122.right = right_134;
		left_133.element = element_135;
		left_133.left = left_136;
		left_133.right = right_137;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove116() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_166 = new BinaryNode();
		BinaryNode left_169 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode right_167 = null;
		BinaryNode right_170 = null;
		int element_141 = -1;
		int element_79 = -2;
		int element_168 = 1;
		int element_1 = -3;
		int element_165 = 2;
		int element_76 = -3;
		int element_78 = -2;
		int element_82 = 1;
		int element_83 = 2;
		int maxE_5 = 3;
		int element_93 = -2;
		int element_81 = 2;
		int element_77 = -3;
		int element_80 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		left_166.element = element_168;
		left_166.left = left_169;
		left_166.right = right_170;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove117() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		int minE_4 = -2;
		int element_77 = -1;
		int element_79 = 0;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -1;
		int x = 0;
		int element_9 = -1;
		int element_6 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove118() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_166 = new BinaryNode();
		BinaryNode right_170 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode right_167 = null;
		BinaryNode left_169 = null;
		int element_141 = -2;
		int element_79 = -3;
		int element_168 = -1;
		int element_1 = -4;
		int element_165 = 1;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -2;
		int element_83 = -1;
		int maxE_5 = 2;
		int element_93 = -3;
		int element_81 = 1;
		int element_77 = -4;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		left_166.element = element_168;
		left_166.left = left_169;
		left_166.right = right_170;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove119() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_121 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode right_122 = null;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -2;
		int element_81 = 2;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_120 = 1;
		int element_77 = 2;
		int element_80 = 1;
		int element_96 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove120() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_166 = new BinaryNode();
		BinaryNode right_170 = new BinaryNode();
		BinaryNode left_169 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode right_167 = null;
		BinaryNode left_175 = null;
		BinaryNode right_176 = null;
		int element_141 = -1;
		int element_174 = 1;
		int element_79 = -2;
		int element_168 = 0;
		int element_1 = -3;
		int element_165 = 2;
		int element_76 = -3;
		int element_78 = -2;
		int element_82 = 0;
		int element_83 = 1;
		int maxE_5 = 3;
		int element_93 = -2;
		int element_81 = 2;
		int element_84 = 1;
		int element_77 = -3;
		int element_80 = -1;
		int element_85 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		left_166.element = element_168;
		left_166.left = left_169;
		left_166.right = right_170;
		right_170.element = element_174;
		right_170.left = left_175;
		right_170.right = right_176;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove121() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_40 = new BinaryNode();
		BinaryNode right_44 = new BinaryNode();
		BinaryNode left_43 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_41 = null;
		BinaryNode left_49 = null;
		BinaryNode right_50 = null;
		int element_79 = -1;
		int element_1 = 4;
		int element_39 = 2;
		int element_78 = 4;
		int element_76 = 4;
		int element_42 = 0;
		int element_81 = 3;
		int element_6 = 3;
		int element_82 = 0;
		int element_83 = 1;
		int minE_4 = -2;
		int element_77 = 3;
		int element_48 = 1;
		int element_80 = 2;
		int element_84 = 1;
		int element_85 = 2;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		left_40.element = element_42;
		left_40.left = left_43;
		left_40.right = right_44;
		right_44.element = element_48;
		right_44.left = left_49;
		right_44.right = right_50;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove122() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_166 = new BinaryNode();
		BinaryNode right_167 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode left_169 = null;
		BinaryNode right_170 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_168 = 2;
		int element_1 = -1;
		int element_165 = 3;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_83 = 2;
		int maxE_5 = 4;
		int element_93 = 0;
		int element_81 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int element_84 = 3;
		int x = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		left_166.element = element_168;
		left_166.left = left_169;
		left_166.right = right_170;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove123() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_6 = 0;
		int minE_4 = -2;
		int element_77 = 0;
		int element_80 = 0;
		int x = -2;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove124() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode left_100 = new BinaryNode();
		BinaryNode right_104 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode right_101 = null;
		BinaryNode left_103 = null;
		int element_79 = 3;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = 2;
		int element_82 = -2;
		int element_83 = -1;
		int maxE_5 = 4;
		int element_93 = 3;
		int element_81 = 2;
		int element_77 = 3;
		int element_80 = 1;
		int element_99 = 1;
		int element_96 = 2;
		int element_102 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		left_100.element = element_102;
		left_100.left = left_103;
		left_100.right = right_104;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove125() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode left_100 = null;
		BinaryNode right_101 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		int element_79 = 3;
		int element_1 = 0;
		int element_76 = -1;
		int element_78 = 0;
		int maxE_5 = 4;
		int element_6 = -1;
		int element_93 = 3;
		int minE_4 = -2;
		int element_77 = -1;
		int element_99 = 1;
		int element_96 = 2;
		int element_80 = 2;
		int element_81 = 3;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove126() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_62 = new BinaryNode();
		BinaryNode left_61 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		BinaryNode left_85 = null;
		BinaryNode right_86 = null;
		int element_79 = 0;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = -1;
		int element_82 = 2;
		int element_83 = 3;
		int element_81 = 2;
		int element_6 = 0;
		int element_84 = 2;
		int minE_4 = -2;
		int element_77 = -1;
		int element_80 = 1;
		int element_60 = 1;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		right_62.element = element_84;
		right_62.left = left_85;
		right_62.right = right_86;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove127() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		int minE_4 = -2;
		int element_77 = -1;
		int element_1 = 0;
		int element_76 = -1;
		int element_78 = 0;
		int x = 0;
		int element_6 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove128() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_40 = new BinaryNode();
		BinaryNode left_43 = null;
		BinaryNode right_44 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_41 = null;
		int element_79 = -1;
		int element_1 = 3;
		int element_39 = 1;
		int element_78 = 3;
		int element_76 = 3;
		int element_42 = 0;
		int element_81 = 2;
		int element_6 = 2;
		int minE_4 = -2;
		int element_77 = 2;
		int element_80 = 1;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		left_40.element = element_42;
		left_40.left = left_43;
		left_40.right = right_44;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove129() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_146 = new BinaryNode();
		BinaryNode left_145 = null;
		BinaryNode left_2 = null;
		BinaryNode left_97 = null;
		BinaryNode right_98 = null;
		BinaryNode right_143 = null;
		BinaryNode left_157 = null;
		BinaryNode right_158 = null;
		int element_141 = 3;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int element_82 = 1;
		int element_83 = 2;
		int element_85 = 3;
		int element_144 = 1;
		int element_93 = 0;
		int maxE_5 = 4;
		int element_81 = 3;
		int element_77 = -2;
		int element_80 = 0;
		int element_84 = 2;
		int element_96 = -1;
		int element_156 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		right_146.element = element_156;
		right_146.left = left_157;
		right_146.right = right_158;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove130() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_13 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_31 = null;
		BinaryNode right_32 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -2;
		int element_30 = -2;
		int element_12 = -3;
		int element_81 = -3;
		int element_6 = 0;
		int element_83 = -2;
		int minE_4 = -4;
		int element_77 = 0;
		int element_80 = 0;
		int element_84 = -1;
		int x = -3;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_30;
		right_14.left = left_31;
		right_14.right = right_32;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove131() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = null;
		BinaryNode right_95 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		int element_6 = -1;
		int minE_4 = -2;
		int element_77 = -1;
		int element_1 = 0;
		int element_76 = -1;
		int element_78 = 0;
		int x = 0;
		int maxE_5 = 2;
		int element_93 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove132() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode left_178 = null;
		BinaryNode right_179 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode left_166 = null;
		int element_141 = -2;
		int element_79 = -3;
		int element_1 = -4;
		int element_165 = -1;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -1;
		int maxE_5 = 1;
		int element_93 = -3;
		int element_81 = -2;
		int element_77 = -4;
		int element_80 = -2;
		int element_177 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		right_167.element = element_177;
		right_167.left = left_178;
		right_167.right = right_179;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove133() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_40 = new BinaryNode();
		BinaryNode left_43 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_41 = null;
		BinaryNode right_44 = null;
		int element_79 = -1;
		int element_1 = 4;
		int element_39 = 2;
		int element_78 = 4;
		int element_76 = 4;
		int element_42 = 1;
		int element_81 = 3;
		int element_6 = 3;
		int element_82 = 1;
		int element_83 = 2;
		int minE_4 = -2;
		int element_77 = 3;
		int element_80 = 2;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		left_40.element = element_42;
		left_40.left = left_43;
		left_40.right = right_44;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove134() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_40 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_41 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_39 = -1;
		int element_76 = 1;
		int element_78 = 1;
		int element_81 = 0;
		int element_6 = 0;
		int minE_4 = -4;
		int element_77 = 0;
		int element_80 = -1;
		int x = -2;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove135() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode left_121 = new BinaryNode();
		BinaryNode left_124 = null;
		BinaryNode right_125 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode right_122 = null;
		int element_79 = -1;
		int element_123 = 0;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -2;
		int maxE_5 = 3;
		int element_93 = 2;
		int element_81 = 2;
		int element_120 = 1;
		int element_77 = 2;
		int element_80 = 1;
		int element_96 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		left_121.element = element_123;
		left_121.left = left_124;
		left_121.right = right_125;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove136() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_62 = new BinaryNode();
		BinaryNode left_61 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_85 = null;
		BinaryNode right_86 = null;
		int element_79 = -1;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = -2;
		int element_81 = 0;
		int element_6 = -3;
		int element_84 = -1;
		int minE_4 = -4;
		int element_77 = -3;
		int element_80 = -1;
		int element_60 = -2;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		right_62.element = element_84;
		right_62.left = left_85;
		right_62.right = right_86;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove137() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = new BinaryNode();
		BinaryNode left_67 = null;
		BinaryNode right_68 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode right_65 = null;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_81 = 2;
		int element_6 = -1;
		int minE_4 = -2;
		int element_63 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int element_60 = 2;
		int element_66 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		left_64.element = element_66;
		left_64.left = left_67;
		left_64.right = right_68;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove138() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_62 = new BinaryNode();
		BinaryNode left_85 = null;
		BinaryNode right_86 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_64 = null;
		BinaryNode right_65 = null;
		int element_79 = -3;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = -4;
		int element_81 = -2;
		int element_6 = -4;
		int element_84 = -1;
		int minE_4 = -5;
		int element_63 = -3;
		int element_77 = -4;
		int element_80 = -3;
		int element_60 = -2;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		right_62.element = element_84;
		right_62.left = left_85;
		right_62.right = right_86;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove139() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		int minE_4 = -2;
		int element_77 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int x = 0;
		int element_6 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove140() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		int minE_4 = -2;
		int element_77 = -1;
		int element_79 = 2;
		int element_1 = 2;
		int element_60 = 1;
		int element_76 = 2;
		int element_78 = 1;
		int x = 0;
		int element_6 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove141() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = null;
		int x = 0;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove142() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_65 = new BinaryNode();
		BinaryNode left_64 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode left_76 = null;
		BinaryNode right_77 = null;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 1;
		int element_6 = -1;
		int minE_4 = -2;
		int element_63 = 0;
		int element_77 = -1;
		int element_80 = 0;
		int element_60 = 2;
		int element_75 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		right_65.element = element_75;
		right_65.left = left_76;
		right_65.right = right_77;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove143() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = new BinaryNode();
		BinaryNode right_65 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode left_67 = null;
		BinaryNode right_68 = null;
		int element_79 = 2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 1;
		int element_82 = -1;
		int element_83 = 0;
		int element_81 = -1;
		int element_6 = -2;
		int minE_4 = -3;
		int element_63 = 0;
		int element_77 = -2;
		int element_80 = -2;
		int element_60 = 1;
		int element_66 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		left_64.element = element_66;
		left_64.left = left_67;
		left_64.right = right_68;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove144() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_40 = new BinaryNode();
		BinaryNode left_43 = new BinaryNode();
		BinaryNode right_44 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_41 = null;
		BinaryNode left_46 = null;
		BinaryNode right_47 = null;
		int element_79 = -2;
		int element_1 = 3;
		int element_39 = 1;
		int element_78 = 3;
		int element_42 = 0;
		int element_76 = 3;
		int element_82 = -2;
		int element_81 = 2;
		int element_6 = 2;
		int element_83 = -1;
		int element_84 = -1;
		int minE_4 = -3;
		int element_77 = 2;
		int element_80 = 1;
		int element_85 = 0;
		int element_45 = -1;
		int x = 0;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		left_40.element = element_42;
		left_40.left = left_43;
		left_40.right = right_44;
		left_43.element = element_45;
		left_43.left = left_46;
		left_43.right = right_47;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove145() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode right_98 = new BinaryNode();
		BinaryNode right_122 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode left_97 = null;
		BinaryNode left_121 = null;
		int element_79 = -2;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -3;
		int element_81 = -1;
		int maxE_5 = 2;
		int element_93 = 1;
		int element_120 = -1;
		int element_77 = 1;
		int element_80 = -2;
		int element_96 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		right_98.element = element_120;
		right_98.left = left_121;
		right_98.right = right_122;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove146() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = new BinaryNode();
		BinaryNode right_68 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode right_65 = null;
		BinaryNode left_67 = null;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = 2;
		int element_6 = -2;
		int minE_4 = -3;
		int element_63 = 1;
		int element_77 = -2;
		int element_80 = 1;
		int element_60 = 2;
		int element_66 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		left_64.element = element_66;
		left_64.left = left_67;
		left_64.right = right_68;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove147() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_65 = new BinaryNode();
		BinaryNode left_64 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		BinaryNode right_62 = null;
		BinaryNode left_76 = null;
		BinaryNode right_77 = null;
		int element_79 = 0;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = -1;
		int element_82 = 1;
		int element_83 = 2;
		int element_85 = 3;
		int element_81 = 4;
		int element_6 = 0;
		int element_84 = 2;
		int minE_4 = -2;
		int element_63 = 1;
		int element_77 = -1;
		int element_80 = 3;
		int element_60 = 3;
		int element_75 = 2;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		right_65.element = element_75;
		right_65.left = left_76;
		right_65.right = right_77;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove148() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode right_17 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode left_16 = null;
		int element_79 = -1;
		int element_15 = -4;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -1;
		int element_83 = -4;
		int element_12 = -2;
		int element_81 = -2;
		int element_6 = 0;
		int minE_4 = -5;
		int element_77 = 0;
		int element_80 = 0;
		int x = -3;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove149() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_94 = new BinaryNode();
		BinaryNode left_97 = new BinaryNode();
		BinaryNode left_100 = new BinaryNode();
		BinaryNode left_103 = null;
		BinaryNode right_104 = null;
		BinaryNode left_2 = null;
		BinaryNode right_95 = null;
		BinaryNode right_98 = null;
		BinaryNode right_101 = null;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 2;
		int maxE_5 = 4;
		int element_93 = 3;
		int element_81 = 2;
		int element_77 = 3;
		int element_80 = 1;
		int element_99 = 1;
		int element_96 = 2;
		int element_102 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		left_94.element = element_96;
		left_94.left = left_97;
		left_94.right = right_98;
		left_97.element = element_99;
		left_97.left = left_100;
		left_97.right = right_101;
		left_100.element = element_102;
		left_100.left = left_103;
		left_100.right = right_104;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove150() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = new BinaryNode();
		BinaryNode left_67 = new BinaryNode();
		BinaryNode right_68 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_62 = null;
		BinaryNode right_65 = null;
		BinaryNode left_70 = null;
		BinaryNode right_71 = null;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_82 = -2;
		int element_83 = -1;
		int element_85 = 0;
		int element_81 = 2;
		int element_6 = -2;
		int element_84 = -1;
		int minE_4 = -3;
		int element_63 = 1;
		int element_77 = -2;
		int element_80 = 1;
		int element_60 = 2;
		int element_69 = -1;
		int element_66 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		left_64.element = element_66;
		left_64.left = left_67;
		left_64.right = right_68;
		left_67.element = element_69;
		left_67.left = left_70;
		left_67.right = right_71;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove151() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_142 = new BinaryNode();
		BinaryNode right_146 = new BinaryNode();
		BinaryNode left_157 = null;
		BinaryNode right_158 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode right_143 = null;
		BinaryNode left_145 = null;
		int element_141 = 1;
		int element_79 = 1;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -2;
		int element_144 = -1;
		int element_93 = -2;
		int maxE_5 = 2;
		int element_81 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int element_156 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		left_142.element = element_144;
		left_142.left = left_145;
		left_142.right = right_146;
		right_146.element = element_156;
		right_146.left = left_157;
		right_146.right = right_158;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove152() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_31 = null;
		BinaryNode right_32 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		int element_79 = 1;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 3;
		int element_30 = 0;
		int element_12 = -1;
		int element_81 = -1;
		int element_6 = 2;
		int minE_4 = -2;
		int element_77 = 2;
		int element_80 = 2;
		int x = 0;
		int element_9 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_30;
		right_14.left = left_31;
		right_14.right = right_32;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove153() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int maxE_5 = 2;
		int element_93 = 0;
		int element_77 = -1;
		int element_80 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove154() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_142 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_166 = null;
		BinaryNode right_167 = null;
		int element_141 = 1;
		int element_79 = 1;
		int element_1 = -1;
		int element_165 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 2;
		int maxE_5 = 3;
		int element_93 = 0;
		int element_77 = -1;
		int element_80 = 2;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove155() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode right_143 = new BinaryNode();
		BinaryNode left_166 = null;
		BinaryNode left_2 = null;
		BinaryNode left_94 = null;
		BinaryNode left_142 = null;
		BinaryNode right_167 = null;
		int element_141 = 1;
		int element_79 = 0;
		int element_1 = -1;
		int element_165 = 3;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 3;
		int maxE_5 = 4;
		int element_93 = 0;
		int element_77 = -1;
		int element_80 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		right_143.element = element_165;
		right_143.left = left_166;
		right_143.right = right_167;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove156() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = null;
		BinaryNode right_3 = null;
		int element_1 = 1;
		int element_76 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove157() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_41 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_40 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_39 = -2;
		int element_76 = 1;
		int element_78 = 1;
		int element_81 = -2;
		int element_6 = 0;
		int minE_4 = -4;
		int element_77 = 0;
		int element_80 = -3;
		int x = -1;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_39;
		right_11.left = left_40;
		right_11.right = right_41;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove158() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = null;
		BinaryNode right_65 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		BinaryNode right_62 = null;
		int element_79 = 0;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = -1;
		int element_81 = 3;
		int element_6 = 0;
		int minE_4 = -2;
		int element_63 = 1;
		int element_77 = -1;
		int element_80 = 2;
		int element_60 = 2;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_8.element = element_60;
		right_8.left = left_61;
		right_8.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

	@Test
	public void test_remove159() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_95 = new BinaryNode();
		BinaryNode left_94 = null;
		BinaryNode left_2 = null;
		BinaryNode left_142 = null;
		BinaryNode right_143 = null;
		int element_141 = 1;
		int element_77 = 0;
		int element_79 = 1;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 1;
		int x = 0;
		int maxE_5 = 2;
		int element_93 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_93;
		right_3.left = left_94;
		right_3.right = right_95;
		right_95.element = element_141;
		right_95.left = left_142;
		right_95.right = right_143;
		//System.out.println(Utilities.repOK(obj));
		obj.remove(x);
	}

}

